<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>计算机科学与技术(081200)考试指南:科目、时间与备考全攻略</title>
    <link href="/2024/07/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-081200-%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%97-%E7%A7%91%E7%9B%AE%E3%80%81%E6%97%B6%E9%97%B4%E4%B8%8E%E5%A4%87%E8%80%83%E5%85%A8%E6%94%BB%E7%95%A5/"/>
    <url>/2024/07/13/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E4%B8%8E%E6%8A%80%E6%9C%AF-081200-%E8%80%83%E8%AF%95%E6%8C%87%E5%8D%97-%E7%A7%91%E7%9B%AE%E3%80%81%E6%97%B6%E9%97%B4%E4%B8%8E%E5%A4%87%E8%80%83%E5%85%A8%E6%94%BB%E7%95%A5/</url>
    
    <content type="html"><![CDATA[# 专业介绍与院校信息见研招网[计算机科学与技术专业知识库](https://yz.chsi.com.cn/zyk/specialityDetail.do?zymc=%e8%ae%a1%e7%ae%97%e6%9c%ba%e7%a7%91%e5%ad%a6%e4%b8%8e%e6%8a%80%e6%9c%af&zydm=081200&cckey=10&ssdm=&method=distribution)。# 二级学科不同的学校开设不同的二级学科，但是主要有计算机系统结构、计算机软件与理论、计算机应用技术以及信息安全这四个二级学科。1. 计算机系统结构(081201)：先进计算机体系结构、先进微处理器结构、智能计算系统、大数据存储系统、量子计算系统、智能物联网系统、系统软件、高性能计算、云计算、嵌入式计算、边缘计算。2. 计算机软件与理论(081202)：计算复杂性理论、算法设计与分析、大数据与智能软件、编译和操作系统、移动计算和智能物联网、新型数据库、图计算、大数据计算、并行与分布式计算、形式化方法和验证技术、程序设计与软件工程学、软件测试、密码学。3. 计算机应用技术(081203)：人工智能、大数据分析与管理、机器学习与数据挖掘、知识工程、信息检索与推荐系统、社交网络、生物信息学、数据库技术、多媒体信息处理、区块链技术、多智能体技术、机器人、图形学、计算机视觉、虚拟现实与人机交互、新一代通信技术、智能物联网与应用、智能系统与应用、智慧教育、智慧医疗、计算机辅助设计与制造。4. 信息安全(081204)：计算机系统安全、网络安全、信息内容与数据安全、软件安全与验证、区块链技术、隐私保护、信息隐藏与检测、密码理论与应用技术、量子密码学与量子信息安全、计算机病毒与免疫系统、网络管理与风险评估。> 以上介绍来自[ustc硕士研究生计算机与信息学院招生简章](https://yz1.ustc.edu.cn/sszs_2024/index_8.shtml)。# 初试## 初试时间一般在每年12月末。## 初试科目1. 101思想政治理论2. 201英语（一）3. 301数学（一）4. 408计算机学科专业基础[大纲](https://blog.cxhap.top/2024/07/11/2024-7-11-2024%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80-408-%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/)# 复试## 复试时间各大高校自行确定时间，一般从三月份开始，四月底结束。## 复试科目1. 面试2. 上机]]></content>
    
    
    <categories>
      
      <category>0812计算机考研408</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机科学与技术</tag>
      
      <tag>812</tag>
      
      <tag>硕士研究生考试指南</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024计算机学科专业基础(408)考试大纲</title>
    <link href="/2024/07/11/2024-7-11-2024%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80-408-%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/"/>
    <url>/2024/07/11/2024-7-11-2024%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%AD%A6%E7%A7%91%E4%B8%93%E4%B8%9A%E5%9F%BA%E7%A1%80-408-%E8%80%83%E8%AF%95%E5%A4%A7%E7%BA%B2/</url>
    
    <content type="html"><![CDATA[# 2024计算机学科专业基础(408)考试大纲> 2024年408考纲为2023年9月公布，是2023年12月参加硕士研究室考试的考纲。2025与2026年考纲将分别于2024年9月以及2025年9月发布。信息收集自互联网。## 考试性质&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算机学科专业基础考试是为高等院校和科研院所招收计算机科学与技术学科的硕士研究生而设置的具有选拔性质的全国统一入学考试科目。其目的是科学、公正、有效地测试考生掌握计算机科学与技术学科大学本科阶段专业基础知识、基本理论、基本方法的水平和分析问题、解决问题的能力，评价的标准是高等院校计算机科学与技术学科优秀本科毕业生所能达到的及格或及格以上的水平，以利于各高等院校和科研院所择优选拔，确保硕士研究生的招生质量。## 考察目标&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;计算机学科专业基础考试涵盖数据结构、计算机组成原理、操作系统和计算机网络等学科专业基础课程。要求考生系统地掌握上述专业基础课程的基本概念、基本原理和基本方法，能够综合运用所学的基本原理和基本方法分析、判断和解决有关理论问题和实际问题。## 考试形式和试卷结构### 一、试卷满分及考试时间本试卷满分为150分，考试时间为180分钟。### 二、答题方式闭卷、笔试。### 三、试卷内容结构|      内容      | 分值 || :------------: | :--: ||    数据结构    | 45分 || 计算机组成原理 | 45分 ||    操作系统    | 35分 ||   计算机网络   | 25分 |### 四、试卷题型结构|    题型    |      分值      || :--------: | :------------: || 单项选择题 | 80分(40题*2分) || 综合应用题 |  70分(共7题)   ||    题号    |      描述      || :--------: | :------------: ||     41     | 数据结构算法题 ||     42     | 数据结构分析题 ||     43     | 计算机组成原理 ||     44     | 计算机组成原理 ||     45     |    操作系统    ||     46     |    操作系统    ||     47     |   计算机网络   |## 考查内容### 数据结构#### [考查目标]1. 掌握数据结构的基本概念、基本原理和基本方法。2. 掌握数据的逻辑结构、存储结构及基本操作的实现，能够对算法进行基本的时间复杂度和空间复杂度的分析。3. 能够运用数据结构的基本原理和方法进行问题的分析与求解，具备采用C或C++语言设计和实现算法的能力。#### 一、线性表##### （一）线性表的基本概念##### （二）线性表的实现1. 顺序存储2. 链式存储##### （三）线性表的应用#### 二、栈、队列和数组##### （一）栈和队列的基本概念##### （二）栈和队列的顺序存储结构##### （三）栈和队列的链式存储结构##### （四）多维数组的存储##### （五）特殊矩阵的压缩存储##### （六）栈、队列和数组的应用#### 三、树与二叉树##### （一）树的基本概念##### （二）二叉树1. 二叉树的定义及其主要特征2. 二叉树的顺序存储结构和链式存储结构3. 二叉树的遍历4. 线索二叉树的基本概念和构造##### （三）树、森林1. 树的存储结构2. 森林与二叉树的转换3. 树和森林的遍历##### （四）树与二叉树的应用1. 哈夫曼(Huffman)树和哈夫曼编码2. 并查集及其应用#### 四、图##### （一）图的基本概念##### （二）图的存储及基本操作1. 邻接矩阵2. 邻接表法3. 邻接多重表，十字链表##### （三）图的遍历1. 深度优先搜索2. 广度优先搜索##### （四）图的基本应用1. 最小（代价）生成树2. 最短路径3. 拓扑排序4. 关键路径#### 五、查找##### （一）查找的基本概念##### （二）顺序查找法##### （三）分块查找法##### （四）折半查找法##### （五）树形查找1. 二叉搜索树2. 平衡二叉树3. 红黑树##### （六）B 树及其基本操作、B+ 树的基本概念##### （七）散列(hash)表##### （八）字符串模式匹配##### （九）查找算法的分析及其应用#### 六、排序##### （一）排序的基本概念##### （二）直接插入排序##### （三）折半插入排序##### （四）起泡排序(bubble sort)##### （五）简单选择排序##### （六）希尔排序(shell sort)##### （七）快速排序##### （八）堆排序##### （九）二路归并排序(merge sort)##### （十）基数排序##### （十一）外部排序##### （十二）排序算法的分析和应用### 计算机组成原理#### [考查目标]1. 掌握单处理器计算机系统中主要部件的工作原理、组成结构以及相互连接方式。2. 掌握指令集体系结构的基本知识和基本实现方法，对计算机硬件相关问题进行分析，并能够对相关部件进行设计。3. 能够综合运用计算机组成的基本原理和基本方法，对有关计算机硬件系统中的理论和实际问题进行计算、分析，对一些基本部件进行简单设计；并能对高级程序设计语言(如 C语言)中的相关问题进行分析。#### 一、计算机系统概述##### （一）计算机系统层次结构1. 计算机系统的基本组成2. 计算机硬件的基本结构3. 计算机软件和硬件的关系4. 计算机系统的工作原理“存储程序”工作方式，高级语言程序与机器语言程序之间的转换，程序和指令的执行过程。##### （二）计算机的性能指标吞吐量、响应时间;CPU 时钟周期、主频、CPI、CPU 执行时间;MIPS、 MFLOPS 、GFLOPS、TFLOPS、PFLOPS、EFLOPS、ZFLOPS。#### 二、数据的表示和运算##### （一）数制与编码1. 定点计数制及其数据之间的相互转换2. 定点数的编码表示##### （二）运算方法和运算电路1. 基本运算部件加法器，算数逻辑单元(ALU)。2. 加/减运算补码加/减运算器，标志位的生成。3. 乘/除运算乘/除法运算的的基本原理，乘法电路和除法电路的基本结构。##### （三）整数的表示和运算1. 无符号整数的表示和运算2. 带符号整数的表示和运算##### （四）浮点数的表示和运算1. 浮点数的表示IEEE 754标准。2. 浮点数的加/减运算#### 三、存储器层次结构##### （一）存储器的分类##### （二）层次化存储器的基本结构##### （三）半导体随机存取存储器1. SRAM 存储器2. DRAM 存储器3. Flash 存储器##### （四）主存储器1. DRAM 芯片和内存条2. 多模块存储器3. 主存和CPU之间的连接##### （五）外部存储器1. 磁盘存储器2. 固态硬盘（SSD）##### （六）高速缓存存储器（Cache）1. Cache 的基本原理2. Cache 和主存之间的映射方式3. Cache 中主存块的替换算法4. Cache 写策略##### （七）虚拟存储器1. 虚拟存储器的基本概念2. 页式虚拟存储器基本原理，页表，地址转换，TLB（快表）。3. 段式虚拟存储器的基本原理4. 段页式虚拟存储器的基本原理#### 四、指令系统##### （一）指令系统的基本概念##### （二）指令格式##### （三）寻址方式##### （四）数据的对齐和大/小端存放方式##### （五）CISC和RISC的基本概念##### （六）高级语言程序与与机器级代码之间的对应1. 编译器、汇编器和链接器的基本概念2. 选择结构语句的机器级表示3. 循环结构语句的机器级表示4. 过程（函数）调用对应的机器级表示#### 五、中央处理器（CPU）##### （一）CPU的功能和基本结构##### （二）指令执行过程##### （三）数据通路的功能和基本结构##### （四）控制器的功能和工作原理##### （五）异常和中断机制1. 异常和中断的基本概念2. 异常和中断的分类3. 异常和中断的检测与响应###### （六）指令流水线1. 指令流水线的基本概念2. 指令流水线的基本实现3. 结构冒险、数据冒险和控制冒险的处理4. 超标量和动态流水线的基本概念##### （七）多处理器基本概念1. SISD、SIMD、MIMD、向量处理器的基本概念2. 硬件多线程的基本概念3. 多核(multi-core)处理器的基本概念4. 共享内存多处理器(SMP)的基本概念#### 六、总线和输入/输出系统##### （一）总线1. 总线的基本概念2. 总线的组成及性能指标3. 总线事务和定时##### （二）I/O接口（I/O控制器）1. I/O接口的功能和基本结构2. I/O接口及其编址##### （三）I/O方式1. 程序查询方式2. 程序中断方式中断的基本概念，中断响应过程，中断处理过程，多重中断和中断屏蔽的概念。3. DMA方式DMA控制器的组成，DMA传送过程。### 操作系统#### [考查目标]1. 掌握操作系统的基本概念、方法和原理，了解操作系统的结构、功能和服务，理解操作系统所采用的策略算法和机制。2. 能够从计算机系统的角度理解并描述应用程序、操作系统内核和计算机硬件协同完成任务的过程。3. 能够运用操作系统的原理，分析并解决计算机系统中与操作系统相关的问题。#### 一、操作系统基础##### （一）操作系统的基本概念##### （二）操作系统的发展历程##### （三）程序的运行环境1. CPU 运行环境内核模式，用户模式。2. 中断和异常的处理3. 系统调用4. 程序的链接与装入5. 程序运行时的内存映像与地址空间##### （四）操作系统结构分层，模块化，宏内核，微内核，外核。##### （五）操作系统引导##### （六）虚拟机#### 二、进程管理##### （一）进程与线程1. 进程与线程的基本概念2. 进程的状态与转换3. 线程的实现内核支持的线程，线程库支持的线程。4. 进程与线程的组织与控制5. 进程间通信共享内存，消息传递，管道。##### （二）CPU 调度与上下文切换1. 调度的基本概念2. 调度的目标3. 调度的实现调度器/调度程序(scheduler)，调度的时机与调度方式（抢占式/非抢占式），闲逛进程，内核级线程与用户级线程调度。4. 典型调度算法先来先服务调度算法，短作业（短进程、短线程）优先调度算法，时间片轮转调度算法，优先级调度算法，高响应比优先调度算法，多级队列调度算法，多级反馈队列调度算法。5. 上下文及其切换机制##### （三）同步与互斥1. 同步与互斥的基本概念2. 基本的实现方法软件方法，硬件方法。3. 锁4. 信号量5. 条件变量6. 经典同步问题生产者-消费者问题，读者-写者问题，哲学家进餐问题等。##### （四）死锁1. 死锁的基本概念2. 死锁预防3. 死锁避免4. 死锁检测和解除#### 三、内存管理##### （一）内存管理基础1. 内存管理的基本概念逻辑地址空间与物理地址空间，地址变换，内存共享，内存保护，内存分配与回收。2. 连续分配管理方式3. 页式管理4. 段式管理5. 段页式管理##### （二）虚拟内存管理1. 虚拟内存的基本概念2. 请求页式管理3. 页框分配4. 页面置换算法最佳置换算法(OPT);先进先出置换算法(FIFO);最近最少使用置换算法(LRU);时钟置换算法(CLOCK)。5. 内存映射文件(Memory-Mapped Flies)6. 虚拟存储器性能的影响因素及改进方法#### 四、文件管理##### （一）文件1. 文件的基本概念2. 文件元数据和索引结点(inode)3. 文件的操作建立，删除，打开，关闭，读，写。4. 文件的保护5. 文件的逻辑结构6. 文件的物理结构##### （二）目录1. 目录的基本概念2. 树形目录3. 目录的操作4. 硬链接和软链接##### （三）文件系统1. 文件系统的全局结构(layout)文件系统在外存中的结构，文件系统在内存中的结构。2. 外存空闲空间管理方法3. 虚拟文件系统4. 文件系统挂载(mounting)#### 五、输入/输出(I/O)管理##### （一）I/O 管理基础1. 设备设备的基本概念，设备的分类，I/O 接口，I/O 端口。2. I/O 控制方式轮询方式，中断方式，DMA 方式。3. I/O 软件层次结构中断处理程序，驱动程序，设备独立软件，用户层I/O软件。4. 输入/输出应用程序接口字符设备接口，块设备接口，网络设备接口，阻塞/非阻塞I/O。##### （二）设备独立文件1. 缓存区管理2. 设备分配和回收3. 假脱机技术(SPOOLing)4. 设备驱动程序接口##### （三）外存管理1. 磁盘磁盘结构，格式化，分区，磁盘调度方法。2. 固态硬盘读写性能特性，磨损均衡。### 计算机网络#### [考查目标]1. 掌握计算机网络的基本概念、基本原理和基本方法。2. 掌握计算机网络的体系结构和典型网络协议，了解典型网络设备的组成和特点，理解典型网络设备的工作原理。3. 能够运用计算机网络的基本概念、基本原理和基本方法进行网络系统的分析、设计和应用。#### 一、计算机网络概述##### （一）计算机网络基本概念1. 计算机网络的定义、组成与功能2. 计算机网络的分类3. 计算机网络的主要性能指标##### （二）计算机网络体系结构1. 计算机网络分层结构2. 计算机网络协议、接口、服务等概念3. ISO / OSI参考模型和TCP / IP模型#### 二、物理层##### （一）通信基础1. 信道、信号、带宽、码元、波特、速率、信源与信宿等基本概念2. 奈奎斯特定理与香农定理3. 编码与调制4. 电路交换、报文交换与分组交换5. 数据报与虚电报##### （二）传输介质1. 双绞线、同轴电缆、光纤与无线传输介质2. 物理层接口的特性##### （三）物理层设备1. 中继器2. 集线器#### 三、数据链路层##### （一）数据链路层的功能##### （二）组帧##### （三）差错控制1. 检错编码2. 纠错编码##### （四）流量控制与可靠传输机制1. 流量控制、可靠传输与滑动窗口机制2. 停止 - 等待协议3. 后退N帧协议( GBN )4. 选择重传协议( SR )##### （五）介质访问控制1. 信道划分频分多路复用、时分多路复用、波分多路复用、码分多路复用的概念和基本原理。2. 随机访问ALOHA 协议;CSMA 协议;CSMA/CD 协议;CSMA/CA 协议。3. 轮询访问令牌传递协议。##### （六）局域网1. 局域网的基本概念与体系结构2. 以太网与IEEE 802.33. IEEE 802.11无线局域网4. VLAN 基本概念与基本原理##### （七）广域网1. 广域网的基本概念2. PPP 协议##### （八）数据链路层设备以太网交换机及其工作原理#### 四、网络层##### （一）网络层的功能1. 异构网络互连2. 路由和转发3. SDN 基本概念4. 阻塞控制##### （二）路由算法1. 静态路由与动态路由2. 距离-向量路由算法3. 链路状态路由算法4. 层次路由##### （三）IPv41. IPv4 分组2. IPv4 地址与 NAT3. 子网划分、路由聚集、子网掩码与 CIDR4. ARP 协议、DHCP 协议与 ICMP 协议##### （四）IPv61. Ipv6 的主要特点2. IPv6 地址##### （五）路由协议1. 自治系统2. 域内路由与域间路由3. RIP 路由协议4. OSPF 路由协议5. BGP 路由协议##### （六）IP组播1. 组播的概念2. IP 组播地址##### （七）移动 IP1. 移动 IP 的概念2. 移动 IP 的通信过程##### （八）网络层设备1. 路由器的组成和功能2. 路由表与分组转发#### 五、传输层##### （一）传输层提供的服务1. 传输层的功能2. 传输层寻址与端口3. 无连接服务与面向连接服务##### （二）UDP 协议1. UDP 数据报2. UDP 校验##### （三）TCP 协议1. TCP 段2. TCP 连接管理3. TCP 可靠传输4. TCP 流量控制5. TCP 拥塞控制#### 六、应用层##### （一）网络应用模型1. 客户/服务端(C/S)模型2. 对等(P2P)模型##### （二）DNS 系统1. 层次域名空间2. 域名服务器3. 域名解析过程##### （三）FTP1. FTP 协议的工作原理2. 控制连接与数据连接##### （四）电子邮件1. 电子邮件系统的组成结构2. 电子邮件的结构与 MIME3. SMTP 协议与POP3 协议##### （五）WWW1. WWW 的概念与组成结构2. HTTP 协议]]></content>
    
    
    <categories>
      
      <category>0812计算机考研408</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机科学与技术</tag>
      
      <tag>812</tag>
      
      <tag>考试大纲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Pages与Actions搭建个人Hexo博客</title>
    <link href="/2024/07/06/2024-7-6-%E4%BD%BF%E7%94%A8Github-Pages%E4%B8%8EActions%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2024/07/06/2024-7-6-%E4%BD%BF%E7%94%A8Github-Pages%E4%B8%8EActions%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BAHexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[使用Github Pages与Actions搭建个人Hexo博客==========================================## 引言作为一名计算机专业的学生，拥有一个自己的博客网站无疑是一件非常酷的事情。然而，搭建一个网站不仅需要完成大量的工作，还需要支付一定的费用来购买或租用服务器并进行维护。那么，有没有一种更简单的方法来搭建博客呢？答案是肯定的。正如标题所示，我们可以利用 GitHub Pages 来搭建一个全前端的网站，轻松实现我们的博客需求。## Hexo 介绍Hexo 是一个快速、简洁且高效的静态博客框架。它使用 Markdown 或其他渲染引擎生成静态文件，并且支持丰富的插件和主题，方便用户自定义博客的外观和功能。> 以下内容部分由ChatGPT生成。### 为什么选择 Hexo？1. **性能优越**：Hexo 生成的静态页面加载速度非常快，这得益于它生成的文件不需要服务器端的动态处理。2. **易于使用**：Hexo 提供了简单易用的命令行工具，方便用户快速创建、发布和管理博客内容。3. **灵活的插件系统**：Hexo 拥有丰富的插件库，用户可以根据需要安装插件来扩展博客的功能，如评论系统、搜索功能等。4. **强大的主题支持**：Hexo 社区有大量精美的主题可供选择，用户可以轻松更换博客的外观，使其更具个性化。5. **活跃的社区**：Hexo 拥有一个活跃的社区，用户可以通过社区获得帮助，分享经验和资源。### Hexo 的基本架构Hexo 的架构主要包括以下几个部分：1. **Hexo 核心**：负责博客的基本功能，如文章管理、静态文件生成等。2. **Hexo 插件**：用于扩展 Hexo 功能的模块，例如 SEO 优化、RSS 生成等。3. **Hexo 主题**：决定博客外观和布局的模板文件，用户可以根据喜好选择和更换主题。4. **Hexo 渲染引擎**：负责将 Markdown 等格式的源文件渲染为 HTML 静态文件。### post和page的区别在 Hexo 中，`page`（页面）和 `post`（文章）是两种常用的不同类型的内容：1. **Post（文章）**：   - **定义**：Post 是指博客中的文章或日志，通常是按时间顺序排列的内容，例如博客文章、新闻稿等。   - **存放位置**：通常存放在 `source/_posts` 目录下（可以在配置文件中指定其他目录）。   - **命名规则**：通常以 Markdown 或其他支持的格式书写，并以日期和标题命名，例如 `2024-07-10-my-first-post.md`。   - **生成**：生成时会被自动排序和归档，可以通过配置自动生成目录、标签、分类等信息。2. **Page（页面）**：   - **定义**：Page 是指博客中的静态页面，通常不按时间顺序排列，而是作为独立的页面存在，如关于页面、联系页面等。   - **存放位置**：通常存放在 `source` 目录下或 `source` 下的其他子目录中，如 `source/about/index.md`。   - **命名规则**：可以是 Markdown 格式，也可以是其他支持的格式，文件名通常就是页面的路径。   - **生成**：生成时作为站点的固定页面存在，可以通过导航链接访问。### 如何开始使用 Hexo？> 跳转到[本地部署Hexo博客](#本地部署Hexo博客)？1. **安装 Node.js 和 Git**：Hexo 依赖于 Node.js 和 Git，首先需要在系统中安装这两个工具。2. **安装 Hexo**：使用 npm（Node.js 包管理工具）安装 Hexo：   ```bash   npm install -g hexo-cli   ```3. **初始化博客**：在目标目录下初始化一个新的 Hexo 博客：   ```bash   hexo init my-blog   cd my-blog   npm install   ```4. **创建文章**：使用 Hexo 提供的命令创建新文章：   ```bash   hexo new "My First Post"   ```5. **生成和预览**：生成静态文件并在本地服务器中预览博客：   ```bash   hexo generate   hexo server   ```   在浏览器中访问 `http://localhost:4000` 查看博客效果。### 部署到 GitHub PagesHexo 提供了简便的部署命令，可以将生成的静态文件直接部署到 GitHub Pages：1. **配置部署信息**：在博客根目录的 `_config.yml` 文件中配置 GitHub Pages 的仓库信息：   ```yaml   deploy:     type: git     repo: https://github.com/username/username.github.io.git     branch: main   ```2. **安装部署插件**：   ```bash   npm install hexo-deployer-git --save   ```3. **执行部署命令**：   ```bash   hexo deploy   ```通过以上步骤，你就可以轻松地将 Hexo 博客部署到 GitHub Pages 上，拥有一个免费的个人博客网站。## 本地部署Hexo博客基本步骤可参考GPT生成部分[如何开始使用 Hexo？](#如何开始使用-Hexo？)。node.js与git的安装与配置可根据不同的操作系统在网上查找安装方法，下面将对基础的安装步骤进行补充。### 切换主题Hexo提供了许多免费的主题可供直接使用，用户可以个性化选择主题以达到自己想要的结果，可以去[Hexo官方主题仓库](https://hexo.io/themes/)挑选自己喜欢的主题。但需要注意的是，每款主题的配置文件可能各不相同，我使用的是**Fluid**主题，下面的配置以该主题为准，大家可自行根据配置文件注释进行配置。#### 下载主题前往Fluid主题官方[Github仓库](https://github.com/fluid-dev/hexo-theme-fluid)下载zip压缩包即可，直接解压至my_blog/theme目录，并将**hexo-theme-fluid**更名为**fluid**。> 顺便在这里解释一下Hexo项目的目录结构，`node_modules`是nodejs自动生成的模块目录，`public`是编译出的静态页面地址，`scaffolds`是自动新建的页面或博客模板文件，`source`中存放页面和post的源文件（.md形式）以及部分图片，其中页面单独成一个目录，博客文件则存放在`_posts`中，关于post和页面的区别请见[post和page的区别](#post和page的区别),`theme`中存放主题。#### 应用主题寻找my_blog根目录下配置文件**_config.yml**，找到**theme**这一行，修改为`theme: fluid`，别忘了:后面有一个空格。修改完配置文件后自己去看看效果吧：```bashhexo generatehexo server```### 更多配置内容为了节约篇幅和更直观形象，下面将用表格呈现一些有用的配置内容。需要注意的是，一个Hexo项目有一个自己的配置文件`_config.yml`，此外每个主题还有一个自己的配置文件`themes/fluid/_config.yml`。表1：_config.yml| 键(Key) | 值(Val) | 描述(Description) || ------- | ------- | ----------------- || title | Your Blog Title | 浏览器tab页名称 || subtitle | Your Subtitle | title的副标题 || description | Your description | 网站的描述 | | author | Your Name | 文章作者名 || language | "zh-CN" | 网站语言 || timezone | '' | 时区设置，可置空 | | url | Your Blog url | 可设置成Github Page的地址 || new_post_name | :year-:month-:day-:title.md | post的模板标题 || post_asset_folder | true | 为每个post自动建立资源文件夹 | | theme | fluid | 所使用的主题名称 |表2：themes/fluid/_config.yml| 键(Key) | 值(Val) | 描述(Description) || ------- | ------- | ----------------- || favicon | /img/fluid.png | 浏览器标签的图标 || apple_touch_icon | /img/fluid.png | 苹果设备的图标 || blog_title | Your blog_title | 导航栏左侧的标题 | | menu | … | 导航栏菜单，可自行添加页面 || index/slogan/text | … | 显示在主页的文字 || about/* | … | 自定义关于页面的个人信息 | 以上只是我建议修改的配置内容，如查找进阶内容请参考[Hexo Fluid 用户手册](https://fluid-dev.github.io/hexo-fluid-docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97)与[Hexo手册](https://hexo.io/zh-cn/docs/)自行研究。### 增加阅读量统计参考文章[Hexo-fluid主题设置统计博客阅读量](http://minghuijia.cn/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/)### 增加评论功能参考文章[Hexo-fluid主题设置统计博客阅读量](http://minghuijia.cn/2022/03/14/Hexo-fluid%E4%B8%BB%E9%A2%98%E8%AE%BE%E7%BD%AE%E7%BB%9F%E8%AE%A1%E5%8D%9A%E5%AE%A2%E9%98%85%E8%AF%BB%E9%87%8F/)## 添加博客页面与文章### 添加About页面使用`hexo new page about`即可新建一个about页面，页面默认存放在**source**文件夹中，一个页面就是一个文件夹。### 从模板新建文章同理，使用`hexo new post newpost`即可新建一篇文章，文章默认存放在**source/_posts**文件夹中，所有的文章都存储在**_posts**文件夹中，但可在文章同级目录建立同名文件夹以存放图片等资源文件，如下图。{% asset_img 1.png post目录结构 %}## 配置Github Action自动发布到Github Page经过上面的配置操作，相信你已经成功在本地运行起来了自己的博客，但仅仅运行在本地肯定不够，我们需要将博客推送到github page中，通过username.github.io或是通过自己的域名进行访问。### 原理github page支持的是静态页面，而hexo编译后生成的`public`文件夹内存放的便是静态页面，因此我们只需要将`public`文件夹内的内容推送至个人github page仓库即可。### 准备工作首先你需要注册一个自己的github账号，并且进行了一系列的安全配置工作。#### 创建Github仓库我们需要创建两个仓库来完成操作，其中一个仓库名随意，我使用的名称是hexo-blog，另一个仓库名必须以`yourusername.github.io`为名字，在创建时会提示你这个仓库是特殊仓库，如下图（因为我预先创建过了，显示仓库已存在）。其中`yourusername.github.io`仓库必须设为**public**。{% asset_img 2.png 创建仓库 %}#### 配置git我们需要使用git工具来将本地代码推送至github仓库，git工具在第一次使用前必须进行相关配置。参考[官方文档](https://git-scm.com/book/zh/v2/%E8%B5%B7%E6%AD%A5-%E5%88%9D%E6%AC%A1%E8%BF%90%E8%A1%8C-Git-%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE)。#### 同步代码为了便于操作，我使用vscode来完成git推送工作，我们首先使用git工具克隆一份空仓库，仓库地址可从Github获取，如下图。{% asset_img 3.png 仓库URL %}在终端使用命令`git clone your-repository-url`克隆到本地，并且将之前创建的hexo项目复制到文件夹下（要将my_blog下的所有文件以及文件夹复制到hexo-blog文件夹下，而不是复制整个my_blog文件夹），接着使用vscode打开文件夹，保持目录结构如下图。{% asset_img 4.png 目录结构 %}然后试试vscode的源代码管理功能吧。这里第一次点击提交是提交更改，第二次则是同步到仓库，第一次提交时必须填写消息。{% asset_img 5.png 源代码管理 %}同步完成后，去Github仓库看下是否同步成功吧。#### 拷贝主题配置文件由于我的github action脚本会自动拉取最新版本主题，因此主题的配置文件必须保存在其他地方，在部署时复制进去即可，因此我们提前将主题配置文件`themes/fluid/_config.yml`复制到`_config_theme.yml`。#### 配置github action##### 配置SSH密钥对使用命令`ssh-keygen -f github-deploy-key`在当前工作目录下可生成文件`github-deploy-key`和`github-deploy-key.pub`。复制 github-deploy-key 文件内容，在 hexo-blog 仓库 `Settings -> Secrets and variables -> Actions -> New repository secret` 页面上添加。1. 在 Name 输入框填写 HEXO_DEPLOY_PRI。2. 在 Value 输入框填写 github-deploy-key 文件内容。复制 github-deploy-key.pub 文件内容，在 your.github.io 仓库 Settings -> Deploy keys -> Add deploy key 页面上添加。1. 在 Title 输入框填写 HEXO_DEPLOY_PUB。2. 在 Key 输入框填写 github-deploy-key.pub 文件内容。3. 勾选 Allow write access 选项。##### 配置GH_Token使用hexo-deployer-git工具部署时需要github personal access token，而且这个token是不能写在配置文件中的，因此只能写在仓库环境变量中，在action部署时自动获取。点击你的GitHub头像 -> 设置 -> 开发者设置 -> Personal access tokens -> Generate new token来获取这个token,设置权限时只需要设置有关repository的读写权限即可。复制 personal access token 内容，在 hexo-blog 仓库 `Settings -> Secrets and variables -> Actions -> New repository secret` 页面上添加。1. 在 Name 输入框填写 GH_TOKEN。2. 在 Value 输入框填写 personal access token 内容。##### 添加github action新建文件`.github/workflows/deploy.yml`，将下面的模板内容粘贴进去，然后根据自己的需要进行修改，需要修改的地方已标出。   ```   name: CI   on:   push:      branches:         - master   env:   GIT_USER: DingWH03 # 这里更改为自己的Github用户名   GIT_EMAIL: 2521248869@qq.com # 这里更改为自己的Github绑定的邮箱   THEME_REPO: fluid-dev/hexo-theme-fluid # 这里更改为你使用的主题的git仓库，省略github.com   THEME_BRANCH: master # 这里更改为你使用的主题的git分支   DEPLOY_REPO: DingWH03/dingwh03.github.io # 这里更改为你自己的仓库地址，省略github.com   DEPLOY_BRANCH: main # 这里更改为你自己的仓库分支，一般都是main   jobs:   build:      name: Build on node ${{ matrix.node_version }} and ${{ matrix.os }}      runs-on: ubuntu-latest      strategy:         matrix:         os: [ubuntu-latest]         node_version: [16.x]      steps:         - name: Checkout         uses: actions/checkout@v4         - name: Checkout theme repo         uses: actions/checkout@v4         with:            repository: ${{ env.THEME_REPO }}            ref: ${{ env.THEME_BRANCH }}            path: themes/fluid # 这里更换成你的主题所在路径         - name: Checkout deploy repo         uses: actions/checkout@v4         with:            repository: ${{ env.DEPLOY_REPO }}            ref: ${{ env.DEPLOY_BRANCH }}            path: .deploy_git         - name: Use Node.js ${{ matrix.node_version }}         uses: actions/setup-node@v4         with:            node-version: ${{ matrix.node_version }}         - name: Configuration environment         env:            HEXO_DEPLOY_PRI: ${{secrets.HEXO_DEPLOY_PRI}}            GH_TOKEN: ${{secrets.GH_TOKEN}}         run: |            sudo timedatectl set-timezone "Asia/Shanghai"            mkdir -p ~/.ssh/            echo "$HEXO_DEPLOY_PRI" > ~/.ssh/id_rsa            chmod 600 ~/.ssh/id_rsa            ssh-keyscan github.com >> ~/.ssh/known_hosts            git config --global user.name $GIT_USER            git config --global user.email $GIT_EMAIL            cp _config_theme.yml themes/fluid/_config.yml # 拷贝主题的配置文件            sed -i "s|token:.*|token: ${GH_TOKEN}|" _config.yml          - name: Install dependencies         run: |            npm install         - name: Deploy hexo         run: |            npm run deploy                  - name: Add CNAME file # 这部分用来为github page添加自己的域名，后面会讲         run: |            echo "blog.cxhap.top" > .deploy_git/CNAME # 改成你的域名地址            cd .deploy_git            git config user.name "$GIT_USER"            git config user.email "$GIT_EMAIL"            git add CNAME            git commit -m "Add CNAME file for custom domain"            git remote set-url origin git@github.com:DingWH03/dingwh03.github.io.git            git push origin HEAD:main   ```   ##### 为github page添加自己的域名步骤和原理都很简单，在你的域名DNS解析中添加一条CNAME解析指向你的github.io地址，然后在github.io仓库中添加一个CNAME文件，里面内容即是你的域名，在上面的脚本中已经体现出来了。{% asset_img 6.png cloudfare %}同步一下仓库吧，不出意外的话Github action会自动执行，并且上传到github.io中。如遇到问题欢迎与我联系。]]></content>
    
    
    <categories>
      
      <category>Blog</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github Pages</tag>
      
      <tag>Github Actions</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenWrt简易校园网自动认证+双WAN配置</title>
    <link href="/2024/07/04/2024-7-4-OpenWrt%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81-%E5%8F%8CWAN%E9%85%8D%E7%BD%AE/"/>
    <url>/2024/07/04/2024-7-4-OpenWrt%E6%A0%A1%E5%9B%AD%E7%BD%91%E8%87%AA%E5%8A%A8%E8%AE%A4%E8%AF%81-%E5%8F%8CWAN%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[# OpenWrt校园网自动认证+双WAN配置最近换了新宿舍，旧的tp-link路由器搬东西的时候坏了，于是去闲鱼上50元淘了个刷好了openwrt的极路由4，路由器是有点老，但是好在人家便宜，刷上openwrt玩法也多，经过在网上查阅资料，成功配置好了双wan接入，配置好负载均衡后可叠加网速（其实相对于校园网来说电信宽带50M带宽实属有点捉襟见肘，但是人家有公网IPV4啊），配合HFUT校园网自动认证脚本可实现路由器端自动登录。## 线路连接原生WAN口连接电信宽带，拨号上网，LAN1口配置成WAN2，直接接入校园网，或者接入已经接入校园网的并配置成关闭DHCP的路由器> 路由器关闭DHCP可视为AP模式，相当于交换机的功能，每个连接的用户可视为一个单独的用户，每个人都需要进行认证，每个人独立带宽。否则所有连接到路由器的人用同一个校园网账号上网。## 宽带拨号上网登录openwrt，选择**网络->接口->WAN**，找到WAN点击编辑，将协议修改为PPPOE，并在下面设置好宽带账号密码即可。{% asset_img 1pppoe.png pppoe-wan %}> 若账号密码正确但始终无法拨号成功，检查线路连接正常后，拨打10000号人工客服解绑一下端口吧，换设备容易出现这种情况。> 配置完成后记得点击**保存并应用**，这样才会生效。## 设置LAN1为WAN2首先在刚才的**网络->接口**页面，选择设备标签页，将LAN1先取消配置，然后从网桥设备中移除。{% asset_img 3.png 从网桥中移除lan1 %}然后选择添加设备，再将LAN1添加为**网络设备**，配置项保持默认即可保持默认即可。> 也许不用删除LAN1再添加，谁知道呢，反正我删除再添加没遇到问题。再次来到**接口**页面，点击左下角添加新接口，名称为WAN2，协议选择DHCP客户端（自动获取ip地址），设备选择LAN1，然后为WAN2配置防火墙区域，放在外网WAN一组即可。{% asset_img 4.png 配置防火墙区域 %}## 为WAN与WAN2设置网关跃点跃点数决定了两个WAN的优先级，数字越小优先级越高，要配置下面的负载均衡一定要为WAN和WAN2设置成不同的跃点数，在**网络->接口->WAN->编辑->高级设置->使用网关跃点进行设置**，如下图。{% asset_img 5.png 配置网关跃点 %}## 配置负载均衡负载均衡的存在是为了让网络同时使用两条WAN接口，将WAN与WAN2配置成balanced可以实现网速叠加。### 配置接口在**网络->负载均衡->接口**标签页中，若已有其他接口添加可以选择删除，然后为WAN、WAN2添加进接口中，只需要添加跟踪主机或ip地址即可，我选择的是www.baidu.com，用于判断网络连接是否正常。{% asset_img 6.png MWAN接口 %}然后为WAN2校园网接口添加**刷新连接跟踪表**，作用是后面需要实现的校园网自动登录。{% asset_img 7.png 刷新连接跟踪表 %}配置完成后如下图，显示出跃点数才算成功。{% asset_img 8.png 接口配置成功 %}### 配置成员为两个接口配置成员即可，跃点数决定负载均衡优先级，一般相同即可，权重可配置成两条接入WAN带宽之比。{% asset_img 9.png 成员配置 %}### 配置策略这里建议添加两个策略，一个是balanced均衡，另一个是wan2_only，及仅校园网。balanced选择两个成员，wan2_only选择wan2即可。> 在某些情况下，某些银行app以及部分使用https协议的应用，在双ip负载均衡条件下可能会报ip切换速度过快的警告，当然切换过快，毕竟一个应用数据通过两条线与服务器连接。{% asset_img 10.png 策略配置 %}### 配置规则为了配合前面我们添加的策略，我们添加两条规则，分别是Default_role和https，像下图这样配置即可。{% asset_img 11.png 规则配置 %}点击保存并应用后，至此算是配置成功了，但是当前还是不能访问网络，因为校园网登录还没实现。## 校园网自动登录这里我提供合肥工业大学合肥校区校园网自动登录脚本，其他学校的可以优先查找Github仓库，若找不到，技术强的大佬可以通过抓包的方式自行摸索。自动登录脚本参考自[合肥工业大学校园网自动登陆指南](https://github.com/HowardZorn/HFUT-DrCOM)，我为了做成自动化脚本稍微进行了一些改动。        #!/bin/bash    username="2022xxxxxx"    password="xxxxxx"    echo 'Checking IP address and network connectivity...'    # Get the IP address of the current machine    ip_address=$(ip -4 addr show lan1 | awk '/inet / {print $2}')    # Function to test network connectivity    check_network() {        local url="http://detectportal.firefox.com/success.txt"        local expected="success"        # Use curl to fetch the content of the URL and store it in a variable        local content=$(curl --ipv4 --silent --max-time 5 --interface lan1 "$url")        local result=$?        if [ $result -eq 0 ] && [ "$content" = "$expected" ]; then    #         echo "Network connectivity test successful."            return 0  # Success        else    #         echo "Failed to establish network connectivity or content does not match."            return 1  # Failure        fi    }    # Check if the IP address starts with "170" and if the network test times out    if [[ $ip_address == 172.* ]]; then        echo 'IP address starts with 172.'        if ! check_network; then            echo 'Network test failed. Executing login script...'            # visit 172.16.200.11/12/13 to obtain the session giver URL.            # http://210.45.240.245/switch.php?xxxxx will give you the correct session id.            url=$(curl 172.16.200.13 --silent --interface lan1 | sed -n "s/.*'\(.*\)'.*/\1/p")            # get PHP session            curl $url --cookie ./cookies --cookie-jar ./cookies --output /dev/null --silent --interface lan1            # login, phpsessid is a critical parameter.            curl http://210.45.240.245/post.php --cookie ./cookies --cookie-jar ./cookies --data-urlencode 'username='$username --data-urlencode 'password='$password --data-urlencode '0MKKey=%B5%C7+%C2%BC' --silent --interface lan1            # test            curl --ipv4 --silent --interface lan1 http://detectportal.firefox.com/success.txt            echo 'Login script executed.'        else            echo 'Network test succeeded. No need to execute login script.'        fi    else        echo 'IP address does not start with 172. Skipping login script.'    fi将该脚本保存至/root/auto-login.sh，修改成正确的账号密码，授予可执行权限`chmod +x ./auto-login.sh`。再次打开openwrt管理网页，找到**网络->负载均衡->通知**，将下面两行代码粘贴进文件最后两行，当WAN2状态改变时会自动执行这个脚本，登录到校园网。    bash /root/auto-login.sh > /root/auto-login.log    date > /root/flag> 还记得配置负载均衡的配置接口部分的**刷新连接跟踪表**吗，那玩意就是用来触发这个脚本的。## 结束到这里OpenWrt简易校园网自动认证+双WAN配置基本上算是结束了，本人经验有限，也是在慢慢摸索中摸索出来的，如有错误欢迎指正，如愿意跟我交流或是有疑问可发邮件<dingwh2023@126.com>联系我。]]></content>
    
    
    <categories>
      
      <category>OpenWrt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OpenWrt</tag>
      
      <tag>网络配置</tag>
      
      <tag>自动认证</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2024/07/03/2024-7-3-%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2024/07/03/2024-7-3-%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[这是一篇测试文章{% asset_img 架构图1.png 图片引用方法一 %}![图片引用方法二](架构图1.png)![图片引用方法三](/images/架构图1.png)]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
